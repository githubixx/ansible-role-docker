---
- name: Load common variables
  ansible.builtin.include_vars:
    file: "main.yml"
  tags:
    - docker

- name: Load required variables based on the OS type
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Register if iptables/nftables is installed
  when:
    - "docker__ip_nft_tables_package.value in ansible_facts.packages"
  ansible.builtin.set_fact:
    docker__ip_nft_tables_installed: true
  loop: "{{ docker_ip_nft_tables_packages | dict2items }}"
  loop_control:
    loop_var: docker__ip_nft_tables_package

- name: Print if iptables/nftables is installed
  when:
    - docker__ip_nft_tables_installed is defined
    - docker__ip_nft_tables_installed
  ansible.builtin.debug:
    msg: "Either iptables or nftables is installed"

- name: Install required iptables packages
  when:
    - docker__ip_nft_tables_installed is not defined
    - docker_firewall_flavor == "iptables"
  ansible.builtin.package:
    name: "{{ docker_ip_nft_tables_packages.iptables }}"
    state: present

- name: Install required nftables packages
  when:
    - docker__ip_nft_tables_installed is not defined
    - docker_firewall_flavor == "nftables"
  ansible.builtin.package:
    name: "{{ docker_ip_nft_tables_packages.nftables }}"
    state: present

- name: Copy certificates for Docker registries (if provided)
  ansible.builtin.copy:
    src: "{{ docker_ca_certificates_src_dir }}/{{ item }}"
    dest: "{{ docker_ca_certificates_dst_dir }}/{{ item }}"
    mode: 0644
    owner: root
    group: root
  with_items:
    - "{{ docker_ca_certificates }}"
  when: docker_ca_certificates is defined
  tags:
    - docker
    - docker-certificates

- name: Update CA certificates
  ansible.builtin.command: "update-ca-certificates"
  when: docker_ca_certificates is defined
  tags:
    - docker
    - docker-certificates

- name: Create docker group
  ansible.builtin.group:
    name: "{{ docker_group }}"
    gid: "{{ docker_gid }}"
    state: present
  tags:
    - docker

- name: Create docker user
  ansible.builtin.user:
    name: "{{ docker_user }}"
    uid: "{{ docker_uid }}"
    group: "{{ docker_group }}"
    shell: /usr/sbin/nologin
  tags:
    - docker

- name: Create download directory (used to store archives)
  ansible.builtin.file:
    path: "{{ docker_download_dir }}"
    state: directory
    mode: 0750
  tags:
    - docker

- name: Register docker binary is installed
  ansible.builtin.stat:
    path: "{{ docker_bin_dir }}/docker"
  register: docker_bin_stat
  tags:
    - docker

- name: Downloading official Docker binaries archive
  ansible.builtin.get_url:
    url: "https://download.docker.com/linux/static/stable/x86_64/docker-{{ docker_version }}.tgz"
    dest: "{{ docker_download_dir }}/docker-{{ docker_version }}.tgz"
    mode: 0640
  when: not docker_bin_stat.stat.exists or (upgrade_docker is defined and upgrade_docker == "true")
  tags:
    - docker

- name: Unzip downloaded Docker archive
  ansible.builtin.unarchive:
    src: "{{ docker_download_dir }}/docker-{{ docker_version }}.tgz"
    dest: "{{ docker_download_dir }}"
    remote_src: true
  when: not docker_bin_stat.stat.exists or (upgrade_docker is defined and upgrade_docker == "true")
  tags:
    - docker

- name: Copy Docker binaries to destination directory
  ansible.builtin.copy:
    src: "{{ docker_download_dir }}/docker/{{ binary }}"
    dest: "{{ docker_bin_dir }}/{{ binary }}"
    mode: 0755
    owner: root
    group: root
    remote_src: true
  notify:
    - Restart docker
  loop: "{{ docker_binaries }}"
  loop_control:
    loop_var: "binary"
  tags:
    - docker

- name: Combine dockerd_settings and dockerd_settings_user (if defined)
  ansible.builtin.set_fact:
    dockerd_settings: "{{ dockerd_settings | combine(dockerd_settings_user | default({})) }}"
  tags:
    - docker

- name: Create docker.socket systemd file
  ansible.builtin.template:
    src: etc/systemd/system/docker.socket.j2
    dest: /etc/systemd/system/docker.socket
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart docker
  tags:
    - docker

- name: Create docker.service systemd file
  ansible.builtin.template:
    src: etc/systemd/system/docker.service.j2
    dest: /etc/systemd/system/docker.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart docker
  tags:
    - docker

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Enable and start Docker
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started
  tags:
    - docker
